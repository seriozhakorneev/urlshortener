package main

import (
	"context"
	"fmt"
	"log"

	"github.com/urlshortener/shortener"
	"google.golang.org/grpc"
)

func main() {

	// remove ./data before

	var conn *grpc.ClientConn
	conn, err := grpc.Dial(":3000", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("Could not connect: %s", err)
	}
	defer conn.Close()

	c := shortener.NewUrlServiceClient(conn)

	// sending new url
	// should receive short url
	newUrl := "google.com"
	messageNew := shortener.Message{Body: newUrl}
	responseNew, err := c.Create(context.Background(), &messageNew)
	if err != nil {
		log.Fatalf("Error when calling Create: %s\n", err)
	}
	if len(responseNew.Body) == 10 {
		fmt.Printf("Create '%s' received from: '%s' -- %t\n", responseNew.Body, newUrl, true)
	} else {
		fmt.Printf("Create '%s' received from: '%s' -- %t\n", responseNew.Body, newUrl, false)
	}

	// sending old url
	// should receive 'Already exist'
	oldUrl := newUrl
	messageOld := shortener.Message{Body: oldUrl}
	responseOld, err := c.Create(context.Background(), &messageOld)
	if err != nil {
		log.Fatalf("Error when calling Create: %s\n", err)
	}
	if responseOld.Body == "Already exist." {
		fmt.Printf("Create '%s' received from: '%s' -- %t\n", responseOld.Body, oldUrl, true)
	} else {
		fmt.Printf("Create '%s' received from: '%s' -- %t\n", responseOld.Body, oldUrl, false)
	}

	// sending old url
	// should receive 'Already exist'
	notUrl := "noturlstring"
	messageNot := shortener.Message{Body: notUrl}
	responseNot, err := c.Create(context.Background(), &messageNot)
	if err != nil {
		log.Fatalf("Error when calling Create: %s\n", err)
	}
	if responseNot.Body == "Not valid url." {
		fmt.Printf("Create '%s' received from: '%s' -- %t\n", responseNot.Body, notUrl, true)
	} else {
		fmt.Printf("Create '%s' received from: '%s' -- %t\n", responseNot.Body, notUrl, false)
	}

	// sending short url generated by newUrl
	// should receive newUrl
	shortUrl := responseNew.Body
	messageGet := shortener.Message{Body: shortUrl}
	responseGet, err := c.Get(context.Background(), &messageGet)
	if err != nil {
		log.Fatalf("Error when calling Create: %s\n", err)
	}
	if responseGet.Body == newUrl {
		fmt.Printf("Get '%s' received from: '%s' -- %t\n", responseGet.Body, shortUrl, true)
	} else {
		fmt.Printf("Get '%s' received from: '%s' -- %t\n", responseGet.Body, shortUrl, false)
	}

	// sending not shortUrl
	// should receive "Not found"
	notShortUrl := "somerandstring"
	messageGetNot := shortener.Message{Body: notShortUrl}
	responseGetNot, err := c.Get(context.Background(), &messageGetNot)
	if err != nil {
		log.Fatalf("Error when calling Create: %s\n", err)
	}
	if responseGetNot.Body == "Not found." {
		fmt.Printf("Get '%s' received from: '%s' -- %t\n", responseGetNot.Body, notShortUrl, true)
	} else {
		fmt.Printf("Get '%s' received from: '%s' -- %t\n", responseGetNot.Body, notShortUrl, false)
	}

}

func handle(err error) {
	if err != nil {
		panic(err)
	}
}
